apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'cpd'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
//apply plugin: 'com.github.ksoichiro.console.reporter'

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'de.aaschmid:gradle-cpd-plugin:1.0'
        //classpath 'com.github.ksoichiro:gradle-console-reporter:0.5.0'
        classpath 'com.google.code.findbugs:findbugs:3.0.1'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

checkstyle {
    ignoreFailures = true
    showViolations = false
    toolVersion = '6.6'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = true
    consoleOutput = false
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

cpd {
    language = 'java'
    minimumTokenCount = 100
    ignoreFailures = true
}

cpdCheck {
    reports {
        text.enabled = true
        xml.enabled = false
    }
}

findbugs {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

test {
  testLogging {
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        println '----------------------------------------------------------------------'
        println "RESULTADO UTest: ${result.resultType} (${result.testCount} test, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        println '----------------------------------------------------------------------'
      }
    }
  }
}

task checkFindBugsReport << {
   def xmlReport = findbugsMain.reports.xml
   def slurped = new XmlSlurper().parse(xmlReport.destination)
   def bugsFound = slurped.BugInstance.size()
   if (bugsFound > 0) {
    println '-----------------------------------'
    println("SE ENCONTRARON $bugsFound BUG (FindBugs).")
    println '-----------------------------------'
   }
}

findbugsMain.finalizedBy checkFindBugsReport
//jacocoTestReport.dependsOn test
