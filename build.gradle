apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'cpd'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'com.github.ksoichiro.console.reporter'

def min_num_warning = 17700
def min_num_pmd = 100
def min_num_cpd = 700
def min_findbug = 740

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'de.aaschmid:gradle-cpd-plugin:1.0'
        classpath 'com.github.ksoichiro:gradle-console-reporter:0.5.0'
        classpath 'com.google.code.findbugs:findbugs:3.0.1'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

checkstyle {
    ignoreFailures = true
    showViolations = false
    toolVersion = '6.6'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = true
    consoleOutput = false
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

cpd {
    language = 'java'
    minimumTokenCount = 50
    ignoreFailures = true
}

cpdCheck {
    reports {
        text.enabled = false
        xml.enabled = true
    }
}

findbugs {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

test {
  testLogging {
    afterSuite { desc, result ->
      if (!desc.parent) { 
        println '----------------------------------------------------------------------'
        println "RESULTADO UTest: ${result.resultType} (${result.testCount} test, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        println '----------------------------------------------------------------------'
      }
      if(result.testCount!=result.successfulTestCount) {
        throw new GradleException("  -------------------------------\n  ERROR: Test no completado\n  -------------------------------")
      }
    }
  }
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination           
            def line
            def new_num_warning = 0 
            outputFile.withReader { reader ->
                while ((line = reader.readLine())!=null) {
                    if(line.contains("<error ")) {
                        new_num_warning++                        
                    }                  
                }
                if(new_num_warning>min_num_warning) {
                    throw new GradleException("  ----------------------------------------------\n  ERROR: MIN_warning($min_num_warning) < ACTUAL_warning($new_num_warning)\n  ----------------------------------------------")
                }
            }
        }
    }
}

tasks.withType(Pmd).each { pmdTask ->
    pmdTask.doLast {
        reports.all { report ->
            def outputFile = report.destination           
            def line
            def new_num_pmd = 0 
            outputFile.withReader { reader ->
                while ((line = reader.readLine())!=null) {
                    if(line.contains("<violation ")) {
                        new_num_pmd++                        
                    }                  
                }
                if(new_num_pmd>min_num_pmd) {
                    throw new GradleException("  -------------------------------------\n  ERROR: MIN_pmd($min_num_pmd) < ACTUAL_pmd($new_num_pmd)\n  -------------------------------------")
                }
            }
        }
    }
}

tasks.withType(FindBugs).each { findbugTask ->
    findbugTask.doLast {
        def xmlReport = findbugsMain.reports.xml
        def slurped = new XmlSlurper().parse(xmlReport.destination)
        def bugsFound = slurped.BugInstance.size()
        if (bugsFound > min_findbug) {
            throw new GradleException("  ----------------------------------------------\n  ERROR: MIN_findbug($min_findbug) < ACTUAL_Findbug($bugsFound)\n  ----------------------------------------------")
        }   
    }
}

task countCpd << { 
    def outputFile = file("$project.buildDir/reports/cpd/cpdCheck.xml")          
    def line
    def new_num_cpd = 0 
    outputFile.withReader { reader ->
        while ((line = reader.readLine())!=null) {
            if(line.contains("<![CDATA[")) {
                new_num_cpd++                        
            }                  
        }
        if(new_num_cpd>min_num_cpd) {
            throw new GradleException("  -----------------------------------\n  ERROR: MIN_cpd($min_num_cpd) < ACTUAL_cpd($new_num_cpd)\n  -----------------------------------")
        }
    }
}
cpdCheck.finalizedBy countCpd
//jacocoTestReport.dependsOn test
jacocoTestReport.dependsOn test
